package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.com/samber/do"
	lop "github.com/samber/lo/parallel"
	"github.com/t-kuni/go-graphql-template/domain/infrastructure/db"
	"github.com/t-kuni/go-graphql-template/ent"
	"github.com/t-kuni/go-graphql-template/graph/model"
	"github.com/t-kuni/go-graphql-template/loaders"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	conn := do.MustInvoke[db.Connector](r.App)
	todo, err := conn.GetEnt().Todo.Create().
		SetText(input.Text).
		SetUserID(input.UserID).
		SetDone(false).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return &model.Todo{ID: todo.ID, Text: todo.Text, Done: todo.Done}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	conn := do.MustInvoke[db.Connector](r.App)
	todo, err := conn.GetEnt().User.Create().SetName(input.Name).SetAge(input.Age).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &model.User{ID: todo.ID, Name: todo.Name, Age: todo.Age}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	conn := do.MustInvoke[db.Connector](r.App)
	todos, err := conn.GetEnt().Todo.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	return lop.Map(todos, func(v *ent.Todo, _ int) *model.Todo {
		return &model.Todo{ID: v.ID, Text: v.Text, Done: v.Done, UserID: v.UserID}
	}), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	conn := do.MustInvoke[db.Connector](r.App)
	users, err := conn.GetEnt().User.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	return lop.Map(users, func(v *ent.User, _ int) *model.User {
		return &model.User{ID: v.ID, Name: v.Name, Age: v.Age}
	}), nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	l := do.MustInvoke[*loaders.Loaders](r.App)
	return l.UserLoader.Load(ctx, obj.UserID)()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
